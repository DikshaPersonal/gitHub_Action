name: Build Ionic Android App

on:
  push:
    branches:
      - action_main  # Change to your actual branch

jobs:
  build:
    runs-on: macos-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 20  # Ensure you use Node.js 20 or later

      - name: Install Dependencies
        run: npm install

      - name: Install Ionic & Capacitor
        run: npm install -g @ionic/cli @capacitor/cli

      - name: Build Ionic App
        run: ionic build --prod

      - name: Sync with Android
        run: npx cap sync android  # Sync to make sure all necessary files are present

      - name: Build Android APK/AAB
        run: |
          cd android
          ./gradlew assembleRelease
          ./gradlew bundleRelease

      - name: Upload APK/AAB as Artifact
        uses: actions/upload-artifact@v4
        with:
          name: android-build
          path: android/app/build/outputs/bundle/release/*.aab

  upload:
    name: Upload APK to Google Drive
    needs: build
    runs-on: ubuntu-latest

    steps:
      - name: Download APK Artifact
        uses: actions/download-artifact@v4
        with:
          name: android-build
          path: app  # Ensure this path contains the APK

      - name: List Downloaded Files
        run: |
          echo "Checking contents of the 'app' directory..."
          ls -lh app/

      - name: Install rclone
        run: |
          curl https://rclone.org/install.sh | sudo bash
          rclone version  # Check if rclone is installed properly

      - name: Configure rclone
        run: |
          mkdir -p ~/.config/rclone
          echo '[gdrive]
          type = drive
          scope = drive
          service_account_file = /tmp/sa.json' > ~/.config/rclone/rclone.conf

      - name: Create Google Drive credentials file
        run: |
          echo '${{ secrets.GOOGLE_DRIVE_CREDENTIALS }}' > /tmp/sa.json
          chmod 600 /tmp/sa.json  # Set proper permissions

      - name: Verify Service Account JSON
        run: |
          echo "Checking service account file..."
          if ! jq empty /tmp/sa.json; then
            echo "Invalid JSON format in service account file!" && exit 1
          fi
          cat /tmp/sa.json | head -n 10  # Show first 10 lines for debugging

      - name: Test rclone Connection
        run: |
          rclone listremotes  # Check if rclone detects 'gdrive'
          rclone lsd gdrive: --drive-service-account-file /tmp/sa.json || echo "Failed to list Google Drive contents"

      - name: Check if AAB Exists
        run: |
          echo "Verifying that the AAB file exists..."
          ls -lh app/  # List files in the app directory
          AAB_FILE=$(ls app/*.aab 2>/dev/null | head -n 1)
          if [ -z "$AAB_FILE" ]; then
            echo "❌ AAB file not found! Build might have failed or artifact was not stored correctly."
            exit 1
          fi
          echo "✅ Found AAB file: $AAB_FILE"

     - name: Rename AAB File with Timestamp
       run: |
          TIMESTAMP=$(date +"%Y%m%d-%H%M")
          AAB_FILE=$(ls app/*.aab 2>/dev/null | head -n 1)

          if [ -z "$AAB_FILE" ]; then
            echo "❌ No AAB file found for renaming."
            exit 1
          fi

          NEW_NAME="app/app-release-$TIMESTAMP.aab"
          mv "$AAB_FILE" "$NEW_NAME"

          echo "✅ Renamed AAB file to $NEW_NAME"


      - name: Delete Existing AAB from Google Drive (Optional)
        run: |
          rclone delete gdrive:${{ secrets.GOOGLE_DRIVE_FOLDER_ID }}/app-release.aab --drive-service-account-file /tmp/sa.json || echo "No existing file found."

      - name: Upload AAB to Google Drive
        run: |
          echo "Uploading renamed AAB file to Google Drive..."
          rclone copy app/app-release.aab gdrive:${{ secrets.GOOGLE_DRIVE_FOLDER_ID }} -P --drive-service-account-file /tmp/sa.json --ignore-existing -vv

      - name: Upload AAB to Google Drive
        run: |
          AAB_FILE=$(ls app/*.aab 2>/dev/null | head -n 1)
          if [ -z "$AAB_FILE" ]; then
            echo "❌ No AAB file found for upload."
            exit 1
          fi
          echo "Uploading $AAB_FILE to Google Drive..."
          rclone copy "$AAB_FILE" gdrive:${{ secrets.GOOGLE_DRIVE_FOLDER_ID }} -P --drive-service-account-file /tmp/sa.json -vv
