name: Build and Upload Ionic Android App

on:
  push:
    branches:
      - github_action  # Change to your actual branch

jobs:
  build:
    runs-on: ubuntu-latest  # Ubuntu for Android build
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 20  # Ensure Ionic works correctly

      - name: Install Dependencies
        run: npm install

      - name: Install Ionic & Capacitor
        run: npm install -g @ionic/cli @capacitor/cli

      - name: Build Ionic App
        run: ionic build --prod

      - name: Setup Java 17
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'  # Required for Android builds

      - name: Cache Gradle Dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: gradle-${{ runner.os }}-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            gradle-${{ runner.os }}-

      - name: Add Android Platform
        run: npx cap add android || echo "Android platform already added"

      - name: Sync with Android
        run: npx cap sync android  # Ensures all necessary files are in place

      - name: Build Android APK/AAB
        run: |
          cd android
          ./gradlew clean assembleRelease --stacktrace --info  # Added clean to clear build cache
          ./gradlew bundleRelease --stacktrace --info

      - name: Upload APK/AAB as Artifact
        uses: actions/upload-artifact@v4
        with:
          name: android-build
          path: android/app/build/outputs/bundle/release/*.aab

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ github.run_number }}
          release_name: Release v${{ github.run_number }}
          draft: false
          prerelease: false

      - name: Get AAB filename
        id: get_aab_filename
        run: |
          AAB_FILE=$(ls android/app/build/outputs/bundle/release/*.aab | head -n 1)
          echo "AAB_FILE=$AAB_FILE" >> $GITHUB_ENV
          echo "AAB_FILENAME=$(basename $AAB_FILE)" >> $GITHUB_ENV

      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ${{ env.AAB_FILE }}
          asset_name: ${{ env.AAB_FILENAME }}
          asset_content_type: application/octet-stream
