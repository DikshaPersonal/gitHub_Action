name: Build and Upload Ionic Android App Debug APK

on:
  push:
    branches:
      - action_main  # Change to your actual branch

jobs:
  build:
    runs-on: macos-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 20

      - name: Extract API domain for filename
        run: |
          # Find the api-factory.ts file
          API_FACTORY_FILE=$(find . -name "api-factory.ts" -type f)

          if [ -z "$API_FACTORY_FILE" ]; then
            echo "Warning: api-factory.ts file not found, using default name"
            echo "DOMAIN_NAME=default" >> $GITHUB_ENV
          else
            echo "Found API factory file: $API_FACTORY_FILE"
            # Cat the file for debugging
            echo "File content:"
            cat "$API_FACTORY_FILE"

            # Extract domain from BASE_URL using a more robust approach
            BASE_URL=$(grep -o 'BASE_URL\s*=\s*"[^"]*"' "$API_FACTORY_FILE" | grep -o '"[^"]*"' | tr -d '"')
            echo "Extracted BASE_URL: $BASE_URL"

            # Extract domain without protocol
            DOMAIN=$(echo "$BASE_URL" | sed -E 's|^https?://||' | sed -E 's|/.*$||')
            echo "Extracted domain: $DOMAIN"

            # Further extract just the subdomain part
            SUBDOMAIN=$(echo "$DOMAIN" | cut -d. -f1)
            echo "Extracted subdomain: $SUBDOMAIN"

            if [ -z "$SUBDOMAIN" ]; then
              echo "Warning: Could not extract domain name, using default"
              echo "DOMAIN_NAME=default" >> $GITHUB_ENV
            else
              echo "DOMAIN_NAME=$SUBDOMAIN" >> $GITHUB_ENV
            fi
          fi

      - name: Install Dependencies
        run: npm install

      - name: Install Ionic & Capacitor
        run: npm install -g @ionic/cli @capacitor/cli

      - name: Build Ionic App
        run: ionic build

      - name: Sync with Android
        run: npx cap sync android

      - name: Build Android Debug APK
        run: |
          cd android
          ./gradlew assembleDebug

      - name: Create output directory
        run: mkdir -p app

      - name: Find and copy Debug APK file
        run: |
          APK_FILE=$(find android/app/build/outputs/apk/debug -name "*.apk" -type f)
          if [ -z "$APK_FILE" ]; then
            echo "Debug APK file not found!"
            exit 1
          fi
          TIMESTAMP=$(date +%Y_%m_%d)
          # Clean up domain name to ensure it's just the hostname without protocol
          DOMAIN_NAME="${{ env.DOMAIN_NAME }}"
          # Remove any "https://" or "http://" if present
          DOMAIN_NAME=$(echo "$DOMAIN_NAME" | sed 's|^https://||' | sed 's|^http://||')
          # Create filename with domain name and timestamp
          APK_FILENAME="${DOMAIN_NAME}-debug-${TIMESTAMP}.apk"
          # Show what we're copying
          echo "Copying $APK_FILE to app/$APK_FILENAME"
          cp "$APK_FILE" "app/$APK_FILENAME"
          echo "APK file copied to app/$APK_FILENAME"
          echo "APK_FILENAME=$APK_FILENAME" >> $GITHUB_ENV

      - name: Upload Debug APK as Artifact
        uses: actions/upload-artifact@v4
        with:
          name: android-debug-build
          path: app/*.apk

  upload:
    name: Upload to Google Drive
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Download Debug APK Artifact
        uses: actions/download-artifact@v4
        with:
          name: android-debug-build
          path: app

      - name: Display available files
        run: |
          echo "Files available for upload:"
          ls -la app/

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install Google API client library
        run: pip install google-api-python-client

      - name: Create credentials file
        run: |
          echo '${{ secrets.GOOGLE_DRIVE_CREDENTIALS }}' > credentials.json
          chmod 600 credentials.json

      - name: Upload to Google Drive
        run: |
          echo "Starting upload to Google Drive..."
          python - <<EOF
          from googleapiclient.discovery import build
          from googleapiclient.http import MediaFileUpload
          from google.oauth2 import service_account
          import os, glob

          # Set up credentials
          SCOPES = ['https://www.googleapis.com/auth/drive']
          credentials = service_account.Credentials.from_service_account_file('credentials.json', scopes=SCOPES)

          # Create Drive API client
          drive_service = build('drive', 'v3', credentials=credentials)

          # Change this to your folder ID where you want to upload
          # Leave empty to upload to root of the service account's drive
          FOLDER_ID = '${{ secrets.GOOGLE_DRIVE_FOLDER_ID_DEBUG_APK }}'

          # Find APK file to upload
          apk_files = glob.glob('app/*.apk')

          if not apk_files:
              print("No APK files found!")
              exit(1)

          for file_path in apk_files:
              file_name = os.path.basename(file_path)

              file_metadata = {
                  'name': file_name
              }

              # If folder ID is provided, set parent folder
              if FOLDER_ID:
                  file_metadata['parents'] = [FOLDER_ID]

              media = MediaFileUpload(
                  file_path,
                  resumable=True
              )

              print(f"Uploading {file_name} to Google Drive...")

              file = drive_service.files().create(
                  body=file_metadata,
                  media_body=media,
                  fields='id,name'
              ).execute()

              print(f"Upload complete! File ID: {file['id']}, Name: {file['name']}")

              # Make the file accessible via link (anyone with link can view)
              drive_service.permissions().create(
                  fileId=file['id'],
                  body={'type': 'anyone', 'role': 'reader'},
                  fields='id'
              ).execute()

              print(f"File shared with link access. View at: https://drive.google.com/file/d/{file['id']}/view")
          EOF